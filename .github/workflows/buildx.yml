name: buildx

on:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker-file:
          - path: .
            tags: "latest"
            platforms: linux/amd64


    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=kokororin/docker-registry-proxy
          TEMP="${{ matrix.docker-file.tags }}"
          TAGZ=($TEMP)
          VERSION=${TAGZ[0]}
          for i in "${!TAGZ[@]}"; do
            if [ "$i" -eq "0" ];
            then
              TAGS="${DOCKER_IMAGE}:${TAGZ[$i]}"
            else
              TAGS="${TAGS},${DOCKER_IMAGE}:${TAGZ[$i]}"
            fi
          done
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0
        with:
          install: true

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Docker Buildx (build)
        uses: docker/build-push-action@v2.7.0
        if: success() && !contains(github.ref, 'master')
        with:
          push: false
          context: ${{ matrix.docker-file.path }}
          file: ${{ matrix.docker-file.path }}/Dockerfile
          platforms: ${{ matrix.docker-file.platforms }}
          tags: ${{ steps.prepare.outputs.tags }}

      - name: Docker Login
        if: success() && contains(github.ref, 'master')
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Buildx (push)
        uses: docker/build-push-action@v2.7.0
        if: success() && contains(github.ref, 'master')
        with:
          push: true
          context: ${{ matrix.docker-file.path }}/
          file: ${{ matrix.docker-file.path }}/Dockerfile
          platforms: ${{ matrix.docker-file.platforms }}
          tags: ${{ steps.prepare.outputs.tags }}